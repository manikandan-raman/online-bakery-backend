datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  user
  admin
}

enum Status {
  active
  inactive
}

enum OrderStatus {
  success
  pending
  failure
}

enum CartStatus {
  savelater
  incart
  orderplaced
}

model User {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName     String          @map("first_name")
  lastName      String?         @map("last_name")
  email         String          @unique
  phone         String
  password      String
  role          UserRole        @default(user)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt() @map("updated_at")
  address       UserAddress[]
  ratingReviews RatingReviews[]
  orders        Orders[]
  payments      Payments[]
  cart          Cart[]

  @@map("users")
}

model UserAddress {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  addressLine1 String    @map("address_line_1")
  addressLine2 String    @map("address_line_2")
  cityId       String    @map("city_id") @db.Uuid
  stateId      String    @map("state_id") @db.Uuid
  countryId    String    @map("country_id") @db.Uuid
  pincode      Int
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt() @map("updated_at")
  user         User      @relation(fields: [userId], references: [id])
  order        Orders[]
  city         Cities    @relation(fields: [cityId], references: [id])
  state        States    @relation(fields: [stateId], references: [id])
  country      Countries @relation(fields: [countryId], references: [id])

  @@map("user_address")
}

model Categories {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  status    Status   @default(active)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  dishes    Dishes[]

  @@map("categories")
}

model Dishes {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  categoryId    String          @map("category_id") @db.Uuid
  name          String
  price         Int
  status        Status          @default(active)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt() @map("updated_at")
  ratingReviews RatingReviews[]
  orderItems    OrderItems[]
  categories    Categories      @relation(fields: [categoryId], references: [id])
  Cart          Cart[]

  @@map("dishes")
}

model RatingReviews {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dishId    String   @map("dish_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  rating    Int
  review    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  dishes    Dishes   @relation(fields: [dishId], references: [id])

  @@unique([userId, dishId])
  @@map("rating_reviews")
}

model Cart {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  dishId    String   @map("dish_id") @db.Uuid
  quantity  Int
  price     Int
  status    CartStatus  @default(incart)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  dishes    Dishes   @relation(fields: [dishId], references: [id])

  @@map("cart")
}

model Orders {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String       @map("user_id") @db.Uuid
  addressId  String       @map("address_id") @db.Uuid
  status     OrderStatus  @default(pending)
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt() @map("updated_at")
  user       User         @relation(fields: [userId], references: [id])
  orderItems OrderItems[]
  payment    Payments?
  address    UserAddress  @relation(fields: [addressId], references: [id])

  @@map("orders")
}

model OrderItems {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String   @map("order_id") @db.Uuid
  dishId    String   @map("dish_id") @db.Uuid
  quantity  Int
  price     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  order     Orders   @relation(fields: [orderId], references: [id])
  dishes    Dishes   @relation(fields: [dishId], references: [id])

  @@map("order_items")
}

model Payments {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String      @map("user_id") @db.Uuid
  orderId       String      @unique @map("order_id") @db.Uuid
  transactionId String      @map("transaction_id")
  modeOfPayment String      @map("mode_of_payment")
  status        OrderStatus @default(pending)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt() @map("updated_at")
  user          User        @relation(fields: [userId], references: [id])
  order         Orders      @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Cities {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stateId     String        @map("state_id") @db.Uuid
  countryId   String        @map("country_id") @db.Uuid
  name        String
  status      Status        @default(active)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt()
  userAddress UserAddress[]
  states      States        @relation(fields: [stateId], references: [id])
  countries   Countries     @relation(fields: [countryId], references: [id])

  @@map("cities")
}

model States {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  countryId    String        @map("country_id") @db.Uuid
  name         String
  status       Status        @default(active)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt()
  user_address UserAddress[]
  city         Cities[]
  countries    Countries     @relation(fields: [countryId], references: [id])

  @@map("states")
}

model Countries {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  status      Status        @default(active)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt()
  userAddress UserAddress[]
  states      States[]
  cities      Cities[]

  @@map("countries")
}
