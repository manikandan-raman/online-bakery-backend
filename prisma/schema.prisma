datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  user
  admin
}

enum Status {
  active
  inactive
}

enum Order_Status {
  success
  pending
  failure
}

model User {
  @@map("users")
  id             String          @id @default(uuid())
  first_name     String
  last_name      String?
  email          String          @unique
  phone          String
  password          String
  role           UserRole        @default(user)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt()
  address        UserAddress[]
  rating_reviews RatingReviews[]
  orders         Orders[]
  payments       Payments[] 
}

model UserAddress {
  @@map("user_address")
  id             String          @id @default(uuid())
  user_id        String
  address_line_1 String
  address_line_2 String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt()
  user           User            @relation(fields: [user_id], references: [id])
  order          Orders[]
}

model Categories {
  @@map("categories")
  id         String   @id @default(uuid())
  name       String
  status     Status   @default(active)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  dishes     Dishes[]
}

model Dishes {
  @@map("dishes")
  id             String          @id @default(uuid())
  category_id    String
  name           String
  price          Int
  status         Status          @default(active)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt()
  rating_reviews RatingReviews[]
  order_items    Orders_Items[]
  categories     Categories      @relation(fields: [category_id], references: [id])
}

model RatingReviews {
  @@map("rating_reviews")
  id         String   @id @default(uuid())
  dish_id    String
  user_id    String
  rating     Int
  review     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  user       User     @relation(fields: [user_id], references: [id])
  dishes     Dishes   @relation(fields: [dish_id], references: [id])
}

model Orders {
  @@map("orders")
  id          String         @id @default(uuid())
  user_id     String
  address_id  String
  status      Order_Status   @default(pending)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt()
  user        User           @relation(fields: [user_id], references: [id])
  order_items Orders_Items[]
  payment     Payments?
  address     UserAddress        @relation(fields: [address_id], references: [id])
}

model Orders_Items {
  @@map("order_items")
  id         String   @id @default(uuid())
  order_id   String
  dish_id    String
  quantity   Int
  price      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()
  order      Orders   @relation(fields: [order_id], references: [id])
  dishes     Dishes   @relation(fields: [dish_id], references: [id])
}

model Payments {
  @@map("payments")
  id         String       @id @default(uuid())
  user_id    String
  order_id   String       @unique
  status     Order_Status @default(pending)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt()
  user        User        @relation(fields: [user_id], references: [id])
  order     Orders        @relation(fields: [order_id], references: [id])
}
